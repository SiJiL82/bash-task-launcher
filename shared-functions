#!/usr/bin/env bash

# Prints an error message to standard error and exits the script with the previous pipeline's exit code.
:die() {
	local -r status=$?

	(($#)) && print_warning "$*" 2>&1
	exit $((status ? status : 1))
}

# Adds the English ordinal suffix to the specified number.
ordinal() {
	local -r n=$1

	case $n in
		1?) echo "${n}th";;
		*1) echo "${n}st";;
		*2) echo "${n}nd";;
		*3) echo "${n}rd";;
		*) echo "${n}th";;
	esac
}

print_info() {
	echo -e "$BLUE$1$NC" 2>&1
}

print_warning() {
	echo -e "$RED$1$NC" 2>&1
}

print_option() {
	local -r option="$1"
	local -r option_width="$2" # Negative number: left align, positive: right align
	local -r option_desc="$3"
	local -r padding=${4:-0}
	local -r desc_colour=${5:-$NC}
	printf '%s%'"$option_width"'s%-'"$padding"'s\n' "$GREEN" "$option" "$desc_colour$option_desc$NC"
}

prompt() {
	local value
	local prompt_text="$YELLOW$1:$NC "

	if [[ "$2" ]]; then
		prompt_text="$YELLOW$1 (ENTER to accept default '$2'):$NC "
	fi

	read -er -p "$prompt_text" value

	if [[ -n $debug_path ]]; then
		echo "$prompt_text$value"
	fi

	if [[ "$value" == $'\0A' ]]; then
		value="$2"
	fi

	echo "$value"
}

arg_or_prompt() {
	value=${1:-$(prompt "$2" "$3")}
	echo "$value"
}

get_longest_task_name()  {
	local -r tasks=$(get_runnable_tasks)
	local task_name_lengths task longest_task_name

	while read -r task; do
		task_name_lengths+=${#task}$'\n'
	done <<<"$tasks"

	longest_task_name=$(sort -nr <<<"$task_name_lengths" | head -1)

	echo "$longest_task_name"
}

get_longest_task_desc()  {
	local -r tasks=$(get_runnable_tasks)
	local task_desc_lengths task longest_task_desc

	while read -r task; do
		desc=$("$task":describe)
		task_desc_lengths+=${#desc}$'\n'
	done <<<"$tasks"
	
	longest_task_desc=$(sort -nr <<<"$task_desc_lengths" | head -1)
	
	echo "$longest_task_desc"
}

prompt_options() {
	local option option_lengths 

	local -n _option_list=$1
	local -r num_options="${#_option_list[@]}"
	local -r option_padding=${#num_options}
	local -r desc_padding=6

	for option in "${_option_list[@]}"; do
		option_lengths+=${#option}$'\n'
	done

	local -r longest_option=$(sort -nr <<<"$option_lengths" | head -1)

	for option in "${_option_list[@]}"; do
		>&2 print_option "$((++i))" "$option_padding" ": $option" $((longest_option+desc_padding)) 
	done
	>&2 print_option "x" "$option_padding" ": Cancel"

	local -r input=$(prompt "Input selection")

	if ((input > 0 && input <= num_options)); then
		echo "${_option_list[$((input - 1))]}"
	elif [[ $input =~ ^[xX]$ ]]; then
		exit
	else
		print_warning "Invalid selection: '$input'"
	fi
}

arg_or_prompt_options() {
	local -n _list=$1
	local value=${2:-$(prompt_options _list)}

	if [[ ! "${_list[*]}" =~ $value ]]; then
		>&2 print_warning "'$value' is not a valid option"

		value=$(prompt_options _list)
	fi

	echo "$value"
}
